findGenerators = mod => {
    console.log('\ngiven mod: ', mod)

    // list for all the elements
    zElements = getElements(mod)

    // coprime Sorting
    coprimeSorted = coprimeSort(mod, zElements)

    coprimeSorted.length < 21
        ? console.log('\nelements coprimeSorted\n', coprimeSorted)
        : console.log('\nthere are more than 20 Elements in the group\n')

    // finding the Generators
    generators = []
    generators = getGenerators(mod, coprimeSorted)
    console.log('\ngenerators of the group\n', generators)

    console.log()
}

getElements = mod => {
    zElements = []
    for (i = 1; i < mod; i++) zElements.push(i)
    return zElements
}

coprimeSort = (mod, zElements) => {
    coprimeSorted = []

    zElements.forEach(element => {
        commonDivider = false
        for (i = 2; i <= element; i++) {
            if (element % i === 0 && mod % i === 0) {
                commonDivider = true
            }
        }

        if (!commonDivider) {
            coprimeSorted.push(element)
        }
    })

    return coprimeSorted
}

getGenerators = (mod, coprimeSorted) => {
    // to be a generator, an element must create all the elements of the group,
    // whilst applying the group operation to itself mod-1 times

    // list for all element generating the entire group
    generators = []

    // goes through each element and check if it generates the group
    coprimeSorted.forEach(element => {
        // list for the elements generated by the element
        generated = []

        // generates the elements by applying the group operation onto the element itself
        for (i = 1; i < mod; i++) {
            generated.push(Math.pow(element, i) % mod)
        }

        // filtering out duplicates by passing the array to a set and creating a new array with it
        onlyUniques = [...new Set(generated)]

        // check if the element generated every element in the group
        if (onlyUniques.length === coprimeSorted.length) {
            generators.push(element)
        }
    })

    return generators
}

// pass the mod for the group you want to find a generator for
findGenerators(283)
